{"version":3,"sources":["components/Users/Users.module.css","assets/images/preloader.svg","redux/authReducer.ts","serviceWorker.js","redux/appReducer.ts","redux/usersReducer.ts","redux/loginReduce.js","redux/reduxStore.ts","components/Common/withSuspense.jsx","Login/Login.jsx","components/Header/Header.jsx","components/Header/HeaderContainer.jsx","components/Nav_Bar/Nav_Bar.jsx","components/Common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/usersReselectors.ts","components/Users/UsersContainer.tsx","App.js","index.tsx","components/Nav_Bar/Nav_Bar.module.css","Login/Login.module.css","components/Header/Header.module.css","components/Common/Paginator/Paginator.module.css","components/Common/Preloader.jsx","redux/profileReducer.ts","components/API/Api.js","redux/dialogsReducer.ts","assets/images/userpng.jpg"],"names":["module","exports","initialState","id","login","email","isAuth","captchaUrl","setAuthUserData","type","data","getCaptchaUrl","payload","getCaptchaThunk","dispatch","a","securityAPI","getCaptcha","response","url","setAuthThunk","API","header","resultCode","loginThunk","password","rememberMe","captchaText","loginFormAPI","authLogin","logoutThunk","authLogout","authReducer","state","action","Boolean","window","location","hostname","match","initialized","appReducer","users","pageSize","totalUserCount","activePage","isFetching","followingInProgress","toggleFollow","userId","toggleIsFetching","toggleFollowingInProgress","followUnfollow","actionCreator","apiMethod","usersReducer","map","u","followed","count","filter","userProp","loginReducer","userProperty","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","dialogsReducer","usersPage","auth","authPage","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","Component","props","fallback","Preloader","connect","validationSchema","yup","shape","required","nullable","captcha","src","name","htmlFor","to","className","s","loginArcticle","initialValues","onSubmit","values","errors","touched","isValid","dirty","inputGroup1","placeholder","reqMark1","Header","login1","nickname","logout","onClick","HeaderContainer","this","React","Nav_Bar","nav","item","activeClassName","active","item1","item2","Paginator","totalUsersCount","onPageChange","pagesCount","Math","ceil","pages","i","push","h1","pageNumbers","p","selectedPage","pageNumber","e","User","user","unfollowThunk","followThunk","object","key","left","avatar","photos","small","userpng","disabled","some","button1","button","right","idNumber","isFriend","status","Users","div","usersReselector","createSelector","UsersAPI","setActivePage","getUsers","prevProps","prevState","pageTitle","getState","totalCount","items","unfollow","bind","follow","DialogsContainer","lazy","Music","Settings","News","ProfileContainer","App","initializeApp","exact","from","path","render","UsersContainer","Login","AppContainer","withRouter","promise","Promise","all","then","MyJSApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","preloader","about","posts","postId","likesCount","userPage","statusText","addPostActionCreator","text","postText","deletePost","setUserProfile","setStatus","profileThunk","profile","getStatusThunk","profileAPI","getStatus","updateStatusThunk","profileStatus","saveAvatar","file","saveProfile","changeProfileData","instance","axios","withCredentials","baseURL","headers","get","post","n","delete","getFriend","friend","put","formData","FormData","append","dialogs","messages","addMessageCreator","stateCopy"],"mappings":"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","file":"static/js/main.fcc43aaf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Users_avatar__2TSRj\",\"preloader\":\"Users_preloader__gmD4_\",\"object\":\"Users_object__2kHVt\",\"left\":\"Users_left__2pgeM\",\"div\":\"Users_div__aSU38\",\"selectedPage\":\"Users_selectedPage__1TR0p\",\"pageNumbers\":\"Users_pageNumbers__FfQ68\",\"pageNumber\":\"Users_pageNumber__UIAMu\",\"user\":\"Users_user__toEuS\",\"h1\":\"Users_h1__2DDtF\",\"right\":\"Users_right__g4XlV\",\"idNumber\":\"Users_idNumber__16kw_\",\"isFriend\":\"Users_isFriend__3vkx5\",\"name\":\"Users_name__3qcLj\",\"status\":\"Users_status__m0i4T\",\"button\":\"Users_button__3ezKP\",\"button1\":\"Users_button1__eCrsa\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.4d137bac.svg\";","import {API, loginFormAPI, securityAPI} from \"../components/API/Api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./reduxStore\";\r\n\r\n\r\nconst SET_USER_DATA = 'authReducer/SET_USER_DATA';\r\n\r\nconst GET_CAPTCHA_URL = 'GET_CAPTCHA_URL'\r\n\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    login: null as string | null,\r\n    email: null as string | null,\r\n    isAuth: null,\r\n    captchaUrl: null as string | null\r\n\r\n}\r\nexport type InitialStateAuthReducerType = typeof initialState\r\n\r\nconst authReducer = (state = initialState, action: any): InitialStateAuthReducerType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            };\r\n        }\r\n        case GET_CAPTCHA_URL: {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\ntype setAuthUserDataDataType = {\r\n    id: number | null\r\n    login: string | null\r\n    email: string | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype setAuthUserDataActionType = {\r\n    type: typeof SET_USER_DATA,\r\n    data: setAuthUserDataDataType\r\n}\r\n\r\ntype getCaptchaUrlActionType = {\r\n    type: typeof GET_CAPTCHA_URL\r\n    payload: { captchaUrl: string }\r\n}\r\n\r\n\r\ntype ActionTypes = setAuthUserDataActionType | getCaptchaUrlActionType\r\ntype DispatchType = Dispatch<ActionTypes>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, any, ActionTypes>\r\n\r\nexport const setAuthUserData = (id: number | null, login: string | null, email: string | null, isAuth: boolean): setAuthUserDataActionType =>\r\n    ({\r\n        type: SET_USER_DATA,\r\n        data: {id, login, email, isAuth}\r\n    });\r\n\r\n\r\nexport const getCaptchaUrl = (captchaUrl: string): getCaptchaUrlActionType => ({\r\n    type: GET_CAPTCHA_URL,\r\n    payload: {captchaUrl}\r\n});\r\n\r\n\r\n\r\nexport const getCaptchaThunk = (): ThunkType => async (dispatch) => {\r\n    const response = await securityAPI.getCaptcha();\r\n    const captchaUrl = response.data.url;\r\n    dispatch(getCaptchaUrl(captchaUrl))\r\n\r\n}\r\nexport const setAuthThunk = ():ThunkType => async (dispatch) => {\r\n    let response = await API.header();\r\n    if (response.data.resultCode === 0) {\r\n        let {id, login, email} = response.data.data;\r\n        dispatch(setAuthUserData(id, login, email, true));\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const loginThunk = (email: string | null, password: string | null, rememberMe: boolean | null, captchaText: string | null):ThunkType => async (dispatch) => {\r\n    let response = await loginFormAPI.authLogin(email, password, rememberMe, captchaText)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthThunk());\r\n    } else if (response.data.resultCode === 10) {\r\n        dispatch(getCaptchaThunk())\r\n    }\r\n}\r\n\r\n\r\nexport const logoutThunk = (): ThunkType => async (dispatch) => {\r\n\r\n    let response = await loginFormAPI.authLogout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false));\r\n    }\r\n\r\n}\r\n\r\nexport default authReducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {setAuthThunk} from \"./authReducer\";\r\n\r\n\r\nconst SET_INITIALIZED = 'SET_INITIALIZED';\r\n\r\n\r\n\r\nlet initialState = {\r\n    initialized: false\r\n\r\n}\r\nexport type InitialStateAppReducerType = typeof initialState\r\nconst appReducer = (state = initialState, action: any): InitialStateAppReducerType => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED: {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\ntype setInitializedType = {\r\n    type: typeof SET_INITIALIZED\r\n}\r\n\r\nexport const setInitialized = (): setInitializedType => ({type: SET_INITIALIZED});\r\n\r\n\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(setAuthThunk());\r\n\r\n    Promise.all([promise])\r\n        .then(() => {\r\n        dispatch(setInitialized())\r\n    })\r\n\r\n}\r\n\r\nexport default appReducer;","import {API} from \"../components/API/Api\";\r\nimport { UsersType } from \"./Types\";\r\nimport {AppStateType} from \"./reduxStore\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\nconst TOGGLE_FOLLOW = 'TOGGLE-FOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_ACTIVE_PAGE = 'SET_ACTIVE_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_FOLLOWING_IN_PROGRESS = 'TOGGLE_FOLLOWING_IN_PROGRESS'\r\n\r\n\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<UsersType>,\r\n    pageSize: 3,\r\n    totalUserCount: 0,\r\n    activePage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>\r\n}\r\n\r\nexport type initialStateUsersReducerType = typeof initialState\r\n\r\nconst usersReducer = (state = initialState, action: ActionTypes): initialStateUsersReducerType => {\r\n    switch (action.type) {\r\n        case TOGGLE_FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map((u:any) => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: !u.followed}\r\n                    }\r\n\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_ACTIVE_PAGE: {\r\n            return {...state, activePage: action.activePage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUserCount: action.count}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_FOLLOWING_IN_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter((id:any) => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n\r\n\r\n    }\r\n}\r\n\r\ntype toggleFollowType = {\r\n    type:typeof TOGGLE_FOLLOW\r\n    userId: number\r\n}\r\ntype setUsers ={\r\n    type:typeof SET_USERS\r\n    users: Array<UsersType>\r\n}\r\ntype setActivePageType = {\r\n    type: typeof SET_ACTIVE_PAGE\r\n    activePage:number\r\n}\r\ntype setTotalUsersCountType = {\r\n    type: typeof SET_TOTAL_USERS_COUNT\r\n    count:number\r\n}\r\ntype toggleIsFetchingType = {\r\n    type:typeof TOGGLE_IS_FETCHING\r\n    isFetching:boolean\r\n}\r\ntype toggleFollowingInProgressType ={\r\n    type: typeof TOGGLE_FOLLOWING_IN_PROGRESS\r\n    isFetching: boolean\r\n    userId: number\r\n}\r\n\r\n\r\ntype ActionTypes = toggleFollowType | setUsers | setActivePageType | setTotalUsersCountType|toggleIsFetchingType|toggleFollowingInProgressType\r\n\r\n\r\nexport const toggleFollow = (userId:number):toggleFollowType => ({type: TOGGLE_FOLLOW, userId});\r\nexport const setUsers = (users: Array<UsersType>):setUsers => ({type: SET_USERS, users});\r\nexport const setActivePage = (activePage:number):setActivePageType => ({type: SET_ACTIVE_PAGE, activePage});\r\nexport const setTotalUsersCount = (totalUserCount:number):setTotalUsersCountType => ({type: SET_TOTAL_USERS_COUNT, count: totalUserCount});\r\nexport const toggleIsFetching = (isFetching:boolean):toggleIsFetchingType => ({type: TOGGLE_IS_FETCHING, isFetching})\r\nexport const toggleFollowingInProgress = (isFetching:boolean, userId:number):toggleFollowingInProgressType => ({type:TOGGLE_FOLLOWING_IN_PROGRESS, isFetching, userId})\r\n\r\ntype GetStateType = () => AppStateType\r\ntype DispatchType = Dispatch<ActionTypes>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, any, ActionTypes>\r\n\r\nexport const getUsers = (activePage:number, pageSize:number): ThunkType =>{\r\n    return async (dispatch, getState) => {\r\n     dispatch(toggleIsFetching(true))\r\n     let data = await API.getUsers(activePage, pageSize)\r\n     dispatch(setTotalUsersCount(data.totalCount))\r\n     dispatch(toggleIsFetching(false))\r\n     dispatch(setUsers(data.items))\r\n }\r\n}\r\n\r\nconst followUnfollow = async (dispatch:DispatchType,userId:number, actionCreator: (userId: number) => toggleFollowType, apiMethod:any) => {\r\n\r\n    dispatch(toggleFollowingInProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(toggleFollowingInProgress(false, userId))\r\n\r\n}\r\n\r\nexport const unfollowThunk = (userId:number):ThunkType => async (dispatch) => {\r\n    await followUnfollow(dispatch, userId, toggleFollow, API.unfollow.bind(userId));\r\n}\r\n\r\n\r\nexport const followThunk = (userId:number): ThunkType => async (dispatch) => {\r\n    await followUnfollow(dispatch, userId, toggleFollow, API.follow.bind(userId));\r\n}\r\n\r\n\r\nexport default usersReducer;\r\n","import {loginFormAPI} from \"../components/API/Api\";\r\n\r\nconst GET_USER_PROPERTIES = 'GET_USER_PROPERTIES'\r\n\r\nlet initialState = {\r\n    userProp: null\r\n}\r\n\r\n\r\nconst loginReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_USER_PROPERTIES :\r\n            return {\r\n                ...state,\r\n                userProp: action.userProperty.login\r\n\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getUserProperties = (formData) => ({type: GET_USER_PROPERTIES, userProperty: {...formData}})\r\n\r\nexport const loginFormThunk = (userProp) => {\r\n    return (dispatch) => {\r\n        dispatch(getUserProperties(userProp))\r\n        loginFormAPI.authLogin(userProp)\r\n    }\r\n}\r\n\r\n\r\nexport default loginReducer;","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport dialogsReducer from \"./dialogsReducer\";\r\nimport usersReducer from './usersReducer';\r\nimport authReducer from './authReducer'\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport loginReducer from \"./loginReduce\";\r\nimport appReducer from \"./appReducer\";\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    authPage: loginReducer,\r\n    app: appReducer\r\n})\r\n\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, /* preloadedState, */ composeEnhancers(applyMiddleware(thunkMiddleware)\r\n));\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store\r\n\r\nexport default store","import React, {Suspense} from \"react\";\r\nimport Preloader from \"./Preloader\";\r\n\r\n\r\nconst withSuspense = (Component) => {\r\n    return (props) => {\r\n      return (\r\n        <Suspense fallback={<div><Preloader /></div>}>\r\n            <Component {...props} />\r\n        </Suspense>\r\n      )\r\n\r\n    };\r\n}\r\n\r\nexport default withSuspense","import React from \"react\";\r\nimport {Formik, Field, Form} from 'formik';\r\nimport {loginFormAPI} from \"../components/API/Api\";\r\nimport {connect} from \"react-redux\";\r\nimport {getCaptchaThunk, getCaptchaUrl, loginThunk, setAuthThunk} from \"../redux/authReducer\";\r\nimport * as yup from \"yup\";\r\nimport s from \"./Login.module.css\"\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\n\r\nconst LoginForm = (props) => {\r\n\r\n    const validationSchema = yup.object().shape({\r\n        email: yup.string()\r\n            .email(\"Invalid email\")\r\n            .required(\"Required\").nullable(),\r\n        password: yup.string()\r\n            .required(\"Required\")\r\n\r\n    });\r\n\r\n    const captcha = () => {\r\n        if (props.captchaUrl)\r\n        {return <div>\r\n            <img src={props.captchaUrl}/>\r\n            <br></br>\r\n            <Field name=\"captchaText\"\r\n                   type=\"text\"\r\n                   id=\"captchaText\"\r\n            />\r\n            <label htmlFor=\"captchaText\">Введите капчу:</label>\r\n\r\n           </div>}\r\n        else {\r\n            return null\r\n        }\r\n\r\n\r\n    }\r\n    props.setAuthThunk()\r\n\r\n    if (props.isAuth) {\r\n       return <Redirect to=\"/profile\" />\r\n    }\r\n\r\n    return <>\r\n        <h1 className={s.loginArcticle}>Войдите в свой аккаунт</h1>\r\n        <Formik\r\n            initialValues={{\r\n                email: null,\r\n                password: null,\r\n                rememberMe: false,\r\n                captchaText: ''\r\n\r\n            }}\r\n\r\n            validationSchema={validationSchema}\r\n\r\n            onSubmit={(values) => {\r\n                props.loginThunk(values.email, values.password, values.rememberMe, values.captchaText)\r\n\r\n            }}\r\n        >\r\n\r\n\r\n            {({values, errors, touched, isValid,dirty}) => (\r\n                <Form>\r\n<div>{captcha}</div>\r\n                    <div className={s.inputGroup1}>\r\n                        <Field name=\"email\"\r\n                               placeholder=\"Введите вашу почту\"\r\n                               type=\"email\"\r\n                               id=\"email\"\r\n                        />\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <div className={s.reqMark1}></div>\r\n\r\n                        <br></br>\r\n\r\n                    </div>\r\n\r\n                    <div className={s.inputGroup1}>\r\n                        <Field name=\"password\"\r\n                               placeholder=\"Введите вашу почту\"\r\n                               type=\"password\"\r\n                               id=\"password\"\r\n                        />\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <div className={s.reqMark1}></div>\r\n\r\n                        <br></br>\r\n                    </div>\r\n                    <label htmlFor=\"rememberMe\">\r\n                        <Field type=\"checkbox\" name=\"rememberMe\"/>\r\n                        Запомнить меня\r\n                    </label>\r\n                    <br></br>\r\n                    <div> {captcha()}</div>\r\n\r\n\r\n                    <button type={\"submit\"} className={s.login}> Залогиниться</button>\r\n\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </>\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captchaUrl: state.auth.captchaUrl\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {loginThunk,getCaptchaThunk,setAuthThunk})(LoginForm)\r\n","import React from \"react\";\r\nimport s from '../Header/Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\n\r\nconst Header = (props) => {\r\n    return (<>\r\n\r\n\r\n        <header className={s.header}>\r\n             <img src='https://smajlik.ru/wp-content/uploads/2017/12/2-1024x816.png'/>\r\n\r\n            {props.isAuth ? <div className={s.login1}> <p className={s.nickname}>{props.login}</p> <button className={s.logout} onClick={props.logoutThunk}> выйти </button></div> :  <NavLink to={'/login'} className={s.login} >\r\n                Войти\r\n            </NavLink>  }\r\n\r\n        </header>\r\n</>\r\n    );\r\n\r\n}\r\nexport default Header;\r\n","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport {loginThunk, logoutThunk, setAuthUserData} from \"../../redux/authReducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nclass HeaderContainer extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Header {...this.props} isAuth={this.props.isAuth} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {setAuthUserData, loginThunk,logoutThunk})(HeaderContainer);\r\n","import React from \"react\";\r\nimport s from '../Nav_Bar/Nav_Bar.module.css';\r\nimport {NavLink, } from \"react-router-dom\";\r\nconst Nav_Bar = () => {\r\n\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to={'/profile'} activeClassName={s.active}>\r\n                    Profile\r\n                </NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to =\"/dialogs\" activeClassName={s.active}>\r\n                    Messages\r\n                </NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to =\"/news\" activeClassName={s.active}>\r\n                    News\r\n                </NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to =\"/music\" activeClassName={s.active}>\r\n                    Music\r\n                </NavLink>\r\n            </div>\r\n            <div className={s.item1}>\r\n                <NavLink to =\"/users\" activeClassName={s.active}>\r\n                    Users\r\n                </NavLink>\r\n            </div>\r\n            <div className={s.item1}>\r\n                <NavLink to =\"/settings\" activeClassName={s.active}>\r\n                    Settings\r\n                </NavLink>\r\n            </div>\r\n\r\n            <div className={s.item2}>\r\n            </div>\r\n        </nav>\r\n    );\r\n\r\n}\r\n\r\nexport default Nav_Bar;\r\n","import React from \"react\";\r\nimport s from \"./Paginator.module.css\"\r\n\r\ntype PropsType = {\r\n    totalUsersCount:number\r\n    pageSize:number\r\n    activePage:number\r\n    onPageChange: (pageNumber: number) => void\r\n}\r\n\r\nconst Paginator: React.FC<PropsType> = ({totalUsersCount, pageSize, activePage, onPageChange}) => {\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize)\r\n    let pages: Array<number> =[];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    return <div>\r\n\r\n        <span className={s.h1}> Users\r\n            </span>\r\n        <div className={s.pageNumbers}>\r\n            {pages.map((p) => {\r\n                return <span className={activePage === p ? s.selectedPage : s.pageNumber}\r\n                             onClick={(e) => {\r\n                                 onPageChange(p);\r\n                             }}>{p} </span>\r\n            })}\r\n        </div>\r\n    </div>\r\n\r\n\r\n}\r\n// @ts-ignore\r\nexport default Paginator","import React from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport userpng from \"../../assets/images/userpng.jpg\";\r\nimport {NavLink} from 'react-router-dom';\r\nimport { UsersType } from \"../../redux/Types\";\r\n\r\n\r\ntype UserType = {\r\n    followingInProgress: Array<number>\r\n    unfollowThunk: (userId:number) => void\r\n    followThunk: (userId:number) => void\r\n    user: UsersType\r\n\r\n}\r\n\r\nlet User: React.FC<UserType> = ({user, followingInProgress, unfollowThunk, followThunk}) => {\r\n\r\n\r\n    return (\r\n\r\n        <div className={s.object} key={user.id}>\r\n\r\n                    <span className={s.left}>\r\n                        <div>\r\n                            <NavLink to={'/profile/' + user.id} className={s.avatar}>\r\n                            <img src={user.photos.small != null ? user.photos.small : userpng} className={s.avatar}/>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div className={s.user}>\r\n                            {user.followed\r\n                                ? <button disabled={followingInProgress.some((id) => id === user.id)}\r\n                                          className={s.button1}\r\n                                          onClick={() => {\r\n                                              unfollowThunk(user.id)\r\n                                          }}> Unfollow </button>\r\n                                : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                          className={s.button}\r\n                                          onClick={() => {\r\n                                              followThunk(user.id)\r\n                                          }}>Follow </button>}\r\n                        </div>\r\n                    </span>\r\n            <span className={s.right}>\r\n                <div className={s.name}>{user.name}</div>\r\n                <div className={s.idNumber}>Мой айди: #{user.id}</div>\r\n                <div className={s.isFriend}>{user.followed ? 'ты мой друг' : 'ты мне не друг'}</div>\r\n                <div className={s.status}> {user.status}</div>\r\n            </span>\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n\r\n}\r\nexport default User","import React from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport Preloader from \"../Common/Preloader\";\r\nimport Paginator from \"../Common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport { UsersType } from \"../../redux/Types\";\r\n\r\ntype PropsType = {\r\n    activePage: number\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    onPageChange: (pageNumber: number) => void\r\n    users: Array<UsersType>\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n    unfollowThunk: (userId: number) => void\r\n    followThunk: (userId: number) => void\r\n}\r\n\r\nlet Users: React.FC<PropsType> = ({activePage, totalUsersCount, pageSize, onPageChange, users, isFetching, ...props}) => {\r\n\r\n\r\n    return <>\r\n\r\n        <div className={s.div}>\r\n            <Paginator totalUsersCount={totalUsersCount} pageSize={pageSize} activePage={activePage}\r\n                       onPageChange={onPageChange}/>\r\n            {isFetching ? <Preloader/> :\r\n\r\n                <div>\r\n                    {users.map((u) => <User key={u.id}\r\n                                            user={(u)}\r\n                                            followingInProgress={props.followingInProgress}\r\n                                            unfollowThunk={props.unfollowThunk}\r\n                                            followThunk={props.followThunk}/>\r\n                    )}\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n    </>\r\n\r\n\r\n}\r\nexport default Users","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const usersReselector = createSelector(getUsers, (users) => {\r\n    return users.filter(u => true)\r\n})\r\n\r\n\r\n","import React from \"react\"\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    setActivePage,\r\n    getUsers, unfollowThunk, followThunk\r\n} from \"../../redux/usersReducer\";\r\nimport Users from \"./Users\";\r\nimport {compose} from \"redux\";\r\nimport {usersReselector} from \"../../redux/usersReselectors\";\r\nimport {UsersType} from \"../../redux/Types\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype OwnPropsType = {\r\n    pageTitle: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    activePage: number\r\n    isFetching: boolean\r\n    users: Array<UsersType>\r\n    totalUsersCount: number\r\n    followingInProgress: Array<number>\r\n    pageSize: number\r\n}\r\ntype MapDispatchPropsType = {\r\n    unfollowThunk: (userId:number) => void\r\n    followThunk: (userId:number) => void\r\n    setActivePage: (pageNumber: number) => void\r\n    getUsers: (activePage: number, pageSize: number) => void\r\n}\r\n\r\n\r\n\r\ntype PropsType = OwnPropsType & MapDispatchPropsType & MapStatePropsType\r\n\r\nclass UsersAPI extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        let {activePage, pageSize,getUsers} = this.props\r\n        getUsers(activePage, pageSize)\r\n    }\r\n\r\n    onPageChange = (pageNumber:number) => {\r\n       this.props.setActivePage(pageNumber);\r\n    }\r\n\r\n    componentDidUpdate(prevProps:any, prevState:any) {\r\n        if(this.props.activePage !== prevProps.activePage){\r\n            this.props.getUsers(this.props.activePage, this.props.pageSize)\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return <>\r\n            <h2>{this.props.pageTitle}</h2>\r\n            <Users activePage={this.props.activePage}\r\n                   users={this.props.users}\r\n                   onPageChange={this.onPageChange}\r\n                   pageSize={this.props.pageSize}\r\n                   totalUsersCount={this.props.totalUsersCount}\r\n                   isFetching={this.props.isFetching}\r\n                   followingInProgress={this.props.followingInProgress}\r\n                   unfollowThunk={this.props.unfollowThunk}\r\n                   followThunk={this.props.followThunk}\r\n\r\n            />\r\n\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: usersReselector(state),\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUserCount,\r\n        activePage: state.usersPage.activePage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress,\r\n    }\r\n}\r\n\r\n\r\nexport default compose(connect<MapStatePropsType,MapDispatchPropsType, OwnPropsType,AppStateType> (mapStateToProps,\r\n    {setActivePage, getUsers, unfollowThunk, followThunk}\r\n))\r\n(UsersAPI);","import React from 'react';\nimport './App.css';\nimport { HashRouter, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\nimport {logoutThunk, setAuthUserData} from \"./redux/authReducer\";\nimport {initializeApp} from \"./redux/appReducer\";\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from \"redux\";\nimport store from \"./redux/reduxStore\";\nimport withSuspense from \"./components/Common/withSuspense\";\nimport Login from \"./Login/Login\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Nav_Bar from \"./components/Nav_Bar/Nav_Bar\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\n\nconst DialogsContainer = React.lazy(() => import(\"./components/Dialogs/DialogsContainer\"));\nconst Music = React.lazy(() => import(\"./components/Music/Music\"));\nconst Settings = React.lazy(() => import(\"./components/Settings/Settings\"));\nconst News = React.lazy(() => import(\"./components/News/News\"));\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\"));\n\n\nclass App extends React.Component {\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    render() {\n        return this.props.initialized ?\n            <div className='app-wrapper'>\n                <HeaderContainer {...this.props}/>\n                <Nav_Bar/>\n                <div className='app-wrapper-content'>\n                    <Switch>\n                        <Redirect exact from=\"/\" to=\"/profile\" />\n                        <Route path='/profile/:userId?' render={withSuspense(ProfileContainer)}/>\n                        <Route path='/dialogs' render={withSuspense(DialogsContainer)}/>\n                        <Route path='/music' render={withSuspense(Music)}/>\n                        <Route path='/news' render={withSuspense(News)}/>\n                        <Route path='/settings' render={withSuspense(Settings)}/>\n                        <Route path='/users' render={ () => <UsersContainer />} />\n                        <Route path='/login' render={() => <Login/>}/>\n                        <Route path='*' render={() => <div> 404 not found</div>}/>\n\n                    </Switch>\n                </div>\n            </div> : null\n\n\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        isAuth: state.auth.isAuth,\n        login: state.auth.login,\n        initialized: state.app.initialized\n\n    }\n}\n\nlet AppContainer = compose(withRouter,\n    connect(mapStateToProps,\n        {setAuthUserData, initializeApp, logoutThunk}))(App);\n\nconst MyJSApp = () => {\n    return <HashRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </HashRouter>\n}\n\nexport default MyJSApp\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport MyJSApp from \"./App\";\n\n\nReactDOM.render(<MyJSApp/>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_Bar_nav__1RCbo\",\"item\":\"Nav_Bar_item__3obiH\",\"active\":\"Nav_Bar_active__2-1PL\",\"item1\":\"Nav_Bar_item1__fTckr\",\"item2\":\"Nav_Bar_item2__3aUSq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginArticle\":\"Login_loginArticle__3ctyU\",\"inputGroup1\":\"Login_inputGroup1__2ahev\",\"reqMark1\":\"Login_reqMark1__3ilqa\",\"login\":\"Login_login__1jj1p\",\"disableLogin\":\"Login_disableLogin__1eS0h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__NXp6m\",\"login1\":\"Header_login1__1Bzsc\",\"nickname\":\"Header_nickname__3Emkt\",\"logout\":\"Header_logout__13zZl\",\"login\":\"Header_login__1lorW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__1ilMm\",\"pageNumbers\":\"Paginator_pageNumbers__IC4m8\",\"pageNumber\":\"Paginator_pageNumber__2lkvm\",\"h1\":\"Paginator_h1__2WmiC\"};","import React from \"react\";\r\nimport preloader from '../../assets/images/preloader.svg'\r\nimport s from \"../Users/Users.module.css\";\r\n\r\nlet Preloader = (props) => {\r\n\r\n    return (\r\n            <div className={s.preloader}>\r\n                <img src={preloader} />\r\n            </div>\r\n\r\n\r\n        )\r\n        }\r\n\r\n\r\n\r\n        export default Preloader","import {API, profileAPI} from \"../components/API/Api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./reduxStore\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst SET_USER_PAGE = 'SET_USER_PAGE';\r\nconst SET_STATUS_TEXT = 'SET_STATUS_TEXT';\r\nconst DELETE_POST = 'DELETE_POST';\r\nconst SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS';\r\n\r\n\r\ntype PostsType = {\r\n    postId: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nlet initialState = {\r\n\r\n    user: [\r\n        {\r\n            about: \"Date of Birth: 21.08.2004\" +\r\n                \"City: Ekb\" +\r\n                \"Education: none\" +\r\n                \"Web site: http://localhost:3000/\",\r\n            id: 2, name: 'Kolya', avatar: 'https://cdn1.flamp.ru/cfdf66132b3994cd538e328a62eca0d8.jpg'\r\n        },\r\n        {\r\n            about: \"Date of Birth: 10.11.2000\" +\r\n                \"City: Ekb\" +\r\n                \"Education: yes\" +\r\n                \"Web site: http://localhost:3000/\",\r\n            id: 3,\r\n            name: 'Egor',\r\n            avatar: 'https://yt3.ggpht.com/a/AGF-l7-srgkU3DPDpJ3s4fbvtKEtjcwBCutQKEzhrg=s900-c-k-c0xffffffff-no-rj-mo'\r\n        },\r\n        {\r\n            about: \"Date of Birth: 18.01.2000\" +\r\n                \"City: Ekb\" +\r\n                \"Education: no\" +\r\n                \"Web site: http://localhost:3000/\",\r\n            id: 4,\r\n            name: 'Misha',\r\n            avatar: 'https://yt3.ggpht.com/a/AATXAJyhQ0K_72pi3UTnWlg_Qlv9j1emfsOkfN6I8Xeq=s900-c-k-c0xffffffff-no-rj-mo'\r\n        },\r\n        {\r\n            about: \"Date of Birth: 10.15.2000\" +\r\n                \"City: Ekb\" +\r\n                \"Education: ys\" +\r\n                \"Web site: http/alhost:3000/\",\r\n            id: 5,\r\n            name: 'Dasha',\r\n            avatar: 'https://st3.depositphotos.com/1007566/12723/v/950/depositphotos_127231368-stock-illustration-young-woman-avatar-isolated-icon.jpg'\r\n        },\r\n        {\r\n            about: \"Date of Birth: 00.00.0000\" +\r\n                \"City: 22ffsdab\" +\r\n                \"Education: yefsdgsgs\" +\r\n                \"Web site: http://localhost:3000/\",\r\n            id: 6,\r\n            name: 'Sveta',\r\n            avatar: 'https://yt3.ggpht.com/a/AATXAJyHhJhL7jlNs4cErQ_cte2UvLEUIXxdJ7QRiPMFXQ=s900-c-k-c0xffffffff-no-rj-mo'\r\n        },\r\n        {\r\n            about: \"Date of Birth: 21.02.1900\" +\r\n                \"City: Ekb\" +\r\n                \"Education: prob\" +\r\n                \"Web site: http://localhost:3000/\",\r\n            id: 7,\r\n            name: 'Roma',\r\n            avatar: 'https://yt3.ggpht.com/a/AATXAJyW1vysJ_RqafTPb-TGMBCUxT5W8t31nqId9Q=s900-c-k-c0xffffffff-no-rj-mo'\r\n        }\r\n    ],\r\n    posts: [\r\n        {postId: 2, message: 'Hi, how old r u?', likesCount: 12},\r\n        {postId: 1, message: 'Hi, how old r u22?', likesCount: 14}\r\n    ] as Array<PostsType>,\r\n    userPage: null as object|null,\r\n    statusText: ['']\r\n\r\n}\r\nexport type InitialStateProfileReducer = typeof initialState\r\nconst profileReducer = (state = initialState, action: any): InitialStateProfileReducer => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            return {\r\n                ...state,\r\n                posts: [{postId: 3, likesCount: 0, message: action.postText}, ...state.posts]\r\n            };\r\n        }\r\n            ;\r\n        case\r\n        SET_USER_PAGE: {\r\n            return {...state, userPage: action.userPage};\r\n        }\r\n            ;\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.postId !== action.userId)\r\n            };\r\n        }\r\n        case\r\n        SET_STATUS_TEXT: {\r\n            return {\r\n                ...state,\r\n                statusText: action.statusText\r\n            };\r\n        }\r\n        case\r\n        SAVE_PHOTO_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                userPage: {...state.userPage, photos: action.photos}\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\ntype UserPageType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: object\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    youtube: string\r\n}\r\n\r\ntype addPostActionCreatorType = {\r\n    type: typeof ADD_POST\r\n    postText: string\r\n}\r\ntype deletePostType = {\r\n    type: typeof DELETE_POST\r\n    userId: number\r\n}\r\ntype setUserProfileType = {\r\n    type: typeof SET_USER_PAGE\r\n    userPage: UserPageType\r\n}\r\n\r\ntype setStatusType = {\r\n    type: typeof SET_STATUS_TEXT\r\n    statusText: string\r\n}\r\ntype savePhotoSuccessType = {\r\n    type: typeof SAVE_PHOTO_SUCCESS\r\n    photos: string\r\n}\r\n\r\nexport const addPostActionCreator = (text:string):addPostActionCreatorType => ({type: ADD_POST, postText: text});\r\nexport const deletePost = (userId:number):deletePostType => ({type: DELETE_POST, userId});\r\nexport const setUserProfile = (userPage:any): setUserProfileType => ({type: SET_USER_PAGE, userPage});\r\nexport const setStatus = (statusText: string):setStatusType => ({type: SET_STATUS_TEXT, statusText});\r\nexport const savePhotoSuccess = (photos:string): savePhotoSuccessType => ({type: SAVE_PHOTO_SUCCESS, photos});\r\n\r\ntype ActionTypes = savePhotoSuccessType | setStatusType |setUserProfileType|deletePostType|addPostActionCreatorType\r\ntype DispatchType = Dispatch<ActionTypes>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, any, ActionTypes>\r\ntype GetStateType = () => AppStateType\r\n\r\n\r\nexport const profileThunk = (userId: number):ThunkType => async (dispatch) => {\r\n    let response = await   API.profile(userId)\r\n            dispatch(setUserProfile(response.data));\r\n\r\n}\r\n\r\nexport const getStatusThunk = (userId: number):ThunkType => async (dispatch) => {\r\n      const response = await  profileAPI.getStatus(userId);\r\n            dispatch(setStatus(response.data))\r\n\r\n}\r\nexport const updateStatusThunk = (statusText: string):ThunkType  => async (dispatch) => {\r\n    let response = await profileAPI.profileStatus(statusText)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(statusText))\r\n    }\r\n}\r\n\r\nexport const saveAvatar = (file: string):ThunkType  => async (dispatch) => {\r\n    let response = await profileAPI.saveAvatar(file)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(savePhotoSuccess(response.data.data.photos))\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport const saveProfile = (values: UserPageType)  => async (dispatch: any, getState:GetStateType ) => {\r\n\r\n   let userId = getState().auth.id\r\n    let response = await profileAPI.changeProfileData(values)\r\n    if (response.data.resultCode === 0) {\r\n        // @ts-ignore\r\n        dispatch(profileThunk(userId))\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer;","import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        'API-KEY': 'a192ecc9-3a69-47da-b1c4-eb1137d2209a'\r\n    }\r\n});\r\n\r\n\r\nexport const API = {\r\n    getUsers(activePage, pageSize) {\r\n        return instance.get(`users?page=${activePage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n\r\n    },\r\n    follow(id) {\r\n        return instance.post(`follow/${id}`).then(n => {\r\n            return n\r\n        })\r\n    },\r\n    unfollow(id) {\r\n        return instance.delete(`follow/${id}`).then(n => {\r\n            return n\r\n        })\r\n\r\n    },\r\n    getFriend(friend, pageSize) {\r\n        return instance.get(`users?friend=${friend}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n\r\n    },\r\n    header() {\r\n        return instance.get(`auth/me`).then(n => {\r\n            return n\r\n        })\r\n    },\r\n    profile(userId) {\r\n        return profileAPI.profile(userId)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n\r\n    profile(userId) {\r\n        return instance.get(`profile/` + userId).then(n => {\r\n            return n\r\n        })\r\n    },\r\n    profileStatus(statusText) {\r\n        return instance.put(`profile/status/`, {status: statusText})\r\n    },\r\n    getStatus(userId) {\r\n        return instance.get(`profile/status/` + userId)\r\n    },\r\n    saveAvatar(file) {\r\n        const formData = new FormData();\r\n        formData.append('image', file);\r\n        return instance.put(`profile/photo`, formData, {headers: {'Content-Type': 'multipart/form-data'}}\r\n        );},\r\n    changeProfileData(values){\r\n        return instance.put(`profile`, values)\r\n    }\r\n}\r\n\r\n\r\nexport const loginFormAPI = {\r\n    authLogin(email,password, rememberMe,captcha = null) {\r\n        return instance.post(`auth/login`,\r\n        {email, password, rememberMe, captcha}\r\n        )\r\n    },\r\n    authLogout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptcha() {\r\n        return instance.get(`security/get-captcha-url` )\r\n\r\n    }\r\n}","\r\ntype DialogType = {\r\n    id: number\r\n    name: string\r\n    avatar: string\r\n}\r\ntype MessagesType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\n\r\nlet initialState = {\r\n\r\n    dialogs: [\r\n        {id: 1, name: 'Oleg', avatar: 'https://cdn1.flamp.ru/8a8f2449872d85ea3d69cd0839aa35da.jpg'},\r\n        {id: 2, name: 'Kolya', avatar: 'https://cdn1.flamp.ru/cfdf66132b3994cd538e328a62eca0d8.jpg'},\r\n        {\r\n            id: 3,\r\n            name: 'Egor',\r\n            avatar: 'https://yt3.ggpht.com/a/AGF-l7-srgkU3DPDpJ3s4fbvtKEtjcwBCutQKEzhrg=s900-c-k-c0xffffffff-no-rj-mo'\r\n        },\r\n        {\r\n            id: 4,\r\n            name: 'Misha',\r\n            avatar: 'https://yt3.ggpht.com/a/AATXAJyhQ0K_72pi3UTnWlg_Qlv9j1emfsOkfN6I8Xeq=s900-c-k-c0xffffffff-no-rj-mo'\r\n        },\r\n        {\r\n            id: 5,\r\n            name: 'Dasha',\r\n            avatar: 'https://st3.depositphotos.com/1007566/12723/v/950/depositphotos_127231368-stock-illustration-young-woman-avatar-isolated-icon.jpg'\r\n        },\r\n        {\r\n            id: 6,\r\n            name: 'Sveta',\r\n            avatar: 'https://yt3.ggpht.com/a/AATXAJyHhJhL7jlNs4cErQ_cte2UvLEUIXxdJ7QRiPMFXQ=s900-c-k-c0xffffffff-no-rj-mo'\r\n        },\r\n        {\r\n            id: 7,\r\n            name: 'Roma',\r\n            avatar: 'https://yt3.ggpht.com/a/AATXAJyW1vysJ_RqafTPb-TGMBCUxT5W8t31nqId9Q=s900-c-k-c0xffffffff-no-rj-mo'\r\n        }\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: 'i', message: 'Hi, how old r u?'},\r\n        {id: 'f', message: 'Hi, how old r u?'},\r\n        {id: 'i', message: '1840932 lmao 420blaze it'},\r\n        {id: 'f', message: '1840932 lmao 420bla'},\r\n        {id: 'f', message: 'Hi, how old r u?'},\r\n        {id: 'i', message: '1840932 lmao 420blaze it'},\r\n        {id: 'f', message: '1840932 lmao 420bla'},\r\n        {id: 'f', message: 'Hi, how old r u?'},\r\n        {id: 'i', message: '1840932 lmao 420blaze it'},\r\n        {id: 'f', message: '1840932 lmao 420bla'}\r\n    ] as Array<MessagesType>\r\n}\r\n\r\nlet ADD_MESSAGE = 'ADD_MESSAGE'\r\n\r\nexport type InitialStateDialogsReducedType = typeof initialState\r\n\r\n\r\nconst dialogsReducer = (state = initialState, action:any): InitialStateDialogsReducedType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE : {\r\n\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 'i', message: action.text}]\r\n            }\r\n        }\r\n        default:\r\n            let stateCopy = {...state}\r\n            return stateCopy\r\n    }\r\n\r\n}\r\n\r\ntype AddMessageCreatorType = {\r\n    type: typeof ADD_MESSAGE,\r\n    text: string\r\n\r\n}\r\n\r\nexport const addMessageCreator = (text:string): AddMessageCreatorType => ({type: ADD_MESSAGE, text});\r\n\r\n\r\nexport default dialogsReducer","module.exports = __webpack_public_path__ + \"static/media/userpng.9ec83b2a.jpg\";"],"sourceRoot":""}